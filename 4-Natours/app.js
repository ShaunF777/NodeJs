// By convention, app.js is used to hold the Express app setup and configuration
const express = require('express');

const app = express(); 
// Calling express() creates an application object
// This "app" has methods to define routes, middleware, and configuration

// -------------------------
// ROUTES
// -------------------------

// Why define routes?
// - To tell the app how to respond to specific HTTP methods (GET, POST, etc.)
//   and specific URL paths ('/', '/users', etc.)

// GET = read data
// Define a route handler for GET requests on the root URL '/'
// Test in Postman: select GET → enter http://127.0.0.1:3000/
app.get('/', (req, res) => {
  // The callback is only executed if the client makes a GET request to '/'
  res
    .status(200) // optional, since 200 is default, but useful for clarity
    // Express automatically sets appropriate headers for JSON when using res.json()
    // Equivalent to: res.writeHead(200, { 'Content-Type': 'application/json' });
    /* Headers observed in Postman for this response:
       X-Powered-By   : Express        (added by Express by default)
       Content-Type   : application/json; charset=utf-8
       Content-Length : <calculated automatically>
       ETag           : <auto-generated identifier for caching>
       Date           : <server time>
       Connection     : keep-alive
       Keep-Alive     : timeout=5
    */
    .json({ message: 'Hello from the server side!', app: 'Natours' });
});

// Define route handler for POST requests on the root URL '/'
// POST = create or send data to the server
// Test in Postman: select POST → enter http://127.0.0.1:3000/
app.post('/', (req, res) => {
  // This callback only executes for POST requests to '/'
  res.send('You can POST to this endpoint...');
});

// -------------------------
// START SERVER
// -------------------------
const port = 3000; 
// app.listen() starts the HTTP server, similar to using http.createServer() in raw Node.js
app.listen(port, () => {
  console.log(`App running on port ${port}...`);
});
