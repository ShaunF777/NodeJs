// --- DEPENDENCIES & SETUP ---
// By convention, app.js is used to hold the main Express application setup and configuration.
// It's a central place for defining routes, middleware, and other application-level settings.

const express = require('express');

// Calling express() creates an Express application object.
// This "app" object is the core of our server; it provides a variety of methods
// for defining routes, handling requests, and managing middleware.
const app = express();

// --- GLOBAL CONFIGURATION (Future use) ---
// This section is for global middleware, which is code that runs on every request.
// The video transcript mentions Prettier and ESLint configuration, which are
// development tools and not part of the runtime server code itself.
// We'll add middleware here later to handle things like JSON parsing, static files, etc.

// --- ROUTES & ROUTE HANDLERS ---
// A route handler is a function that defines how the application responds to a
// client request at a specific URL and with a specific HTTP method.

// We define a route handler using the app object and the HTTP method (e.g., .get(), .post()).
// The general syntax is: app.<httpMethod>('<url>', (req, res) => { ... });

// The 'req' (request) object holds information about the incoming request (e.g., URL, headers, body).
// The 'res' (response) object is used to send back the response to the client.

// 1. GET Route for the Root URL ('/')
// Purpose: To read or retrieve data from the server.
// Test with Postman: Select GET -> enter http://127.0.0.1:3000/
app.get('/', (req, res) => {
  // res.status(<code>) allows us to explicitly set the HTTP status code.
  // 200 means 'OK' and is the default, but it's good practice to include it for clarity.
  // Using .json() sends a JSON response. Express automatically sets the 'Content-Type'
  // header to 'application/json' for us, which is a major convenience over plain Node.js.
  res.status(200).json({ message: 'Hello from the server side!', app: 'Natours' });
  /* Headers observed in Postman for this response:
       X-Powered-By   : Express        (added by Express by default)
       Content-Type   : application/json; charset=utf-8
       Content-Length : <calculated automatically>
       ETag           : <auto-generated identifier for caching>
       Date           : <server time>
       Connection     : keep-alive
       Keep-Alive     : timeout=5
    */
});

// 2. POST Route for the Root URL ('/')
// Purpose: To create or send data to the server.
// Test with Postman: Select POST -> enter http://127.00.1:3000/
app.post('/', (req, res) => {
  // res.send() is a flexible method that can send a string, object, or array.
  // It automatically sets the 'Content-Type' header based on the data type.
  // The default status code for res.send() is 200 'OK'.
  res.send('You can POST to this endpoint...');
});

// --- START SERVER ---
// The app.listen() method starts the HTTP server and binds it to a specific port.
// This is analogous to using http.createServer() and .listen() in raw Node.js.

const port = 3000;
app.listen(port, () => {
  console.log(`App running on port ${port}...`);
});

/**Test the endpoints: Open Postman and test the two routes you've created:
 * For the GET request, select the GET method, enter http://127.0.0.1:3000/ in the URL bar, and click 'Send'. 
 * You should receive the JSON response.
 * For the POST request, select the POST method, use the same URL, and click 'Send'. 
 * You should see the string "You can POST to this endpoint..." in the response body. */